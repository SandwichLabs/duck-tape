# https://taskfile.dev

version: '3'

vars:
  BIN: "{{.ROOT_DIR}}/bin"

env:
  CGO_ENABLED: '1'

tasks:
  default:
    cmds:
      - task: lint
      - task: test
      - task: build
  goreleaser:install:
    desc: Installs goreleaser
    cmds:
      - go install github.com/goreleaser/goreleaser@latest
  golangci-lint:install:
    desc: Installs golangci-lint
    cmds:
      - brew install golangci-lint
  mod:
    desc: Downloads and tidy Go modules
    cmds:
      - go mod download
      - go mod tidy

  clean:
    desc: Cleans temp files and folders
    cmds:
      - rm -rf dist/
      - rm -rf tmp/

  test:
    desc: Runs test suite
    aliases: [t]
    deps: [mod]
    cmds:
      - go test {{catLines .GO_PACKAGES}}
    vars:
      GO_PACKAGES:
        sh: go list ./...
  lint:
    desc: Runs golangci-lint
    aliases: [l]
    sources:
      - './**/*.go'
      - .golangci.yml
    cmds:
      - golangci-lint run

  lint:fix:
    desc: Runs golangci-lint and fixes any issues
    sources:
      - './**/*.go'
      - .golangci.yml
    cmds:
      - golangci-lint run --fix
  build:
    vars:
      USE_DIR: '{{.DIR | default "$PWD" }}'
    desc: Build the ducktape binary
    cmds:
      - go build -v -o=dist/dt .
    generates:
      - dist/dt
    sources:
      - ./**/*.go
  build:release:
    desc: Build the DuckTape binaries using goreleaser
    cmds:
      - goreleaser release --skip=publish --clean
  release:*:
    desc: Release the DuckTape binary
    summary: |
      This task will build the DuckTape binary and release it to GitHub:
      - Build the DuckTape binary
      - Push the tag to GitHub
      - Create a new release on GitHub
      - Upload the ./dist/ artifacts to the release
    vars:
      VERSION: "{{index .MATCH 0}}"
    preconditions:
      - sh: test $(git rev-parse --abbrev-ref HEAD) = "main"
        msg: "You must be on the main branch to release"
      - sh: "[[ -z $(git diff --shortstat main) ]]"
        msg: "You must have a clean working tree to release"
    prompt: "Are you sure you want to release version {{.VERSION}}?"
    cmds:
      - cmd: echo "Releasing v{{.VERSION}}"
        silent: true
      - "git tag v{{.VERSION}}"
      - "git push origin tag v{{.VERSION}}"
      - task: build:release
      - gh release create v{{.VERSION}} -F dist/CHANGELOG.md
      - gh release upload v{{.VERSION}} ./dist/*
      - cmd: printf "%s" '{{.COMPLETE_MESSAGE}}'
        silent: true
